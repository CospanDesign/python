/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.15.5 on Sat Mar 12 13:28:43 2016
 */

#include "sipAPIword.h"

#line 9 "word.sip"
#include <word.h>
#line 12 "./sipwordWord.cpp"



extern "C" {static PyObject *meth_Word_reverse(PyObject *, PyObject *);}
static PyObject *meth_Word_reverse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Word *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Word, &sipCpp))
        {
            char *sipRes;

            sipRes = sipCpp->reverse();

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Word, sipName_reverse, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Word(void *, const sipTypeDef *);}
static void *cast_Word(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Word)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Word(void *, int);}
static void release_Word(void *sipCppV,int)
{
    delete reinterpret_cast<Word *>(sipCppV);
}


extern "C" {static void dealloc_Word(sipSimpleWrapper *);}
static void dealloc_Word(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Word(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_Word(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Word(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Word *sipCpp = 0;

    {
        const char * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "s", &a0))
        {
            sipCpp = new Word(a0);

            return sipCpp;
        }
    }

    {
        const Word * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Word, &a0))
        {
            sipCpp = new Word(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_Word[] = {
    {SIP_MLNAME_CAST(sipName_reverse), meth_Word_reverse, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_word_Word = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Word,
        {0}
    },
    {
        sipNameNr_Word,
        {0, 0, 1},
        1, methods_Word,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_type_Word,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Word,
    0,
    0,
    0,
    release_Word,
    cast_Word,
    0,
    0,
    0,
    0,
    0,
    0
};
